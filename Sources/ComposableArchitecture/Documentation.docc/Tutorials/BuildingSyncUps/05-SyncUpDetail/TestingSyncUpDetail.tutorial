@Tutorial(time: 10) {
  @Intro(title: "Testing the sync up detail") {
    The `SyncUpDetail` feature has slowly become quite complex. It now handles two forms of 
    navigation (an alert and sheet), it models navigation state with a single enum, and it
    communicates with a parent feature via delegate actions. It's about time we got some test
    coverage on this feature so we can be sure it works as we expect, and so that we can make
    future changes with confidence.
  }
  
  @Section(title: "Testing the edit flow") {
    @ContentAndMedia {
      Let's start by testing the edit flow. We will exercise the full user flow of tapping the
      "Edit" button, making some edits, and then committing the edits to the parent features.
    }
    
    @Steps {
      @Step {
        Start by creating a new SyncUpDetailTests.swift file and pasting some basic scaffolding
        for a new test.
        
        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0001.swift)
      }
      
      @Step {
        Create a ``ComposableArchitecture/TestStore`` for the `SyncUpDetail` feature.
        
        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0002.swift)
      }
      
      @Step {
        Emulate the user tapping on the "Edit" button and assert that the `destination` state
        mutates to point to the `.edit` case.
        
        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0003.swift)
      }
      
      Run the test suite to confirm that so far everything passes.
      
      @Step {
        Emulate the user changing the title of the sync up by sending a deeply nested action for
        the `.destination`, when it's `.presented`, in the `.edit` case, and then finally a 
        ``ComposableArchitecture/BindableAction/binding-108e1`` action to set the sync up.
        
        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0004.swift)
      }
      
      @Step {
        Assert how the state changes after sending the action. In particulra, the `syncUp` data
        inside the `edit` case of the destination should change. We can use the special 
        ``ComposableArchitecture/PresentationState/subscript(case:)-7uqte`` defined on 
        `$destination` to modify the data in a particular case.
        
        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0005.swift)
      }
      
      Run the test suite again to confirm that everything still passes.
      
      @Step {
        Finish the user flow by emulating the user tapping on the "Done" button. We expect the
        `destination` state to be `nil`'d out, which will cause the sheet to be dismissed. And we
        expect the parent feature's `syncUp` state to be updated with the edited sync up.
        
        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0006.swift)
      }
      
      Run the test suite to confirm it still passes. We have now tested the full user flow of 
      editing a sync up, and because it passes we can be confident that there are no other state
      changes happening.
      
      It is also possible to shorten this test quite a bit by using a non-exhaustive test store, 
      as we did in <doc:PresentingSyncUpForm>, but we will leave that as an exercise for the reader.
    }
  }
  
  @Section(title: "Testing the delete flow") {
    @ContentAndMedia {
      Next we will test the flow of the user deleting the sync up. 
    }
      
    @Steps {
      @Step {
      }
    }
  }
}
